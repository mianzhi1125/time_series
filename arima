from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error
import math
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller

#Read my data file

net_df = pd.read_csv("C:\\Users\\huang\\Desktop\\A1A22\\time serie\\ESGU_LSTM.csv", index_col="Date", parse_dates=True)
print(net_df.head(3))

net_df.replace([np.inf, -np.inf], np.nan, inplace=True)
net_df = net_df.dropna()

from statsmodels.tsa.stattools import adfuller
adf_test = adfuller(net_df['Close'])
print(f'ADF Statistic: {adf_test[0]}')
print(f'p-value: {adf_test[1]}')
for key, value in adf_test[4].items():
    print(f'Critial Value {key}: {value}')

# Based on the p-value, you can determine if the series is stationary or not
if adf_test[1] < 0.05:
    print("The series is stationary.")
else:
    print("The series is not stationary and may require differencing.")

def test_stationarity(timeseries):
    dftest = adfuller(timeseries, autolag='AIC')
    return dftest[1] <= 0.05

# Function to make the time series stationary
def difference_until_stationary(df):
    while not df.apply(test_stationarity).all():
        df = df.apply(lambda x: x.diff()).dropna()
    return df

# Apply differencing until stationary
df_diff = difference_until_stationary(net_df)

net_df = np.log(net_df/net_df.shift(1))
net_df.replace([np.inf, -np.inf], np.nan, inplace=True)
net_df = net_df.dropna()
net_df[["Close","Volume"]].plot(subplots=True, layout=(2,1));
adf_test = adfuller(net_df['Close'])
print(f'ADF Statistic: {adf_test[0]}')
print(f'p-value: {adf_test[1]}')
for key, value in adf_test[4].items():
    print(f'Critial Value {key}: {value}')
if adf_test[1] < 0.05:
    print("The series is stationary.")
else:
    print("The series is not stationary and may require differencing.")

train_data, test_data = net_df[0:int(len(net_df)*0.9)], net_df[int(len(net_df)*0.9):]
train_arima = train_data['Close']
test_arima = test_data['Close']

# Fit the ARIMA model on the training dataset
model = ARIMA(train_arima, order=(1,1,0))
model_fit = model.fit()

# In-sample predictions
in_sample_predictions = model_fit.predict(start=train_arima.index[0], end=train_arima.index[-1], dynamic=False)

# In-sample error metrics
in_sample_mse = mean_squared_error(train_arima, in_sample_predictions)
in_sample_mae = mean_absolute_error(train_arima, in_sample_predictions)
in_sample_rmse = math.sqrt(mean_squared_error(train_arima, in_sample_predictions))

print('In-sample MSE: '+str(in_sample_mse))
print('In-sample MAE: '+str(in_sample_mae))
print('In-sample RMSE: '+str(in_sample_rmse))

# Rolling out-of-sample forecasts
history = train_arima.tolist()
predictions = list()

for t in range(len(test_arima)):
    model = ARIMA(history, order=(1,1,0))
    model_fit = model.fit()
    yhat = model_fit.forecast()[0]
    predictions.append(yhat)
    history.append(test_arima[t])

# Out-of-sample error metrics
mse = mean_squared_error(test_arima, predictions)
mae = mean_absolute_error(test_arima, predictions)
rmse = math.sqrt(mean_squared_error(test_arima, predictions))

print('Out-of-sample MSE: '+str(mse))
print('Out-of-sample MAE: '+str(mae))
print('Out-of-sample RMSE: '+str(rmse))

# Plot
plt.figure(figsize=(16,8))
plt.plot(net_df.index[-250:], net_df['Close'].tail(250), label = 'Train Stock Price')
plt.plot(test_data.index, test_arima,label = 'Real Stock Price')
plt.plot(test_data.index, predictions,label = 'Predicted Stock Price')
plt.title('ESGU Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('ESGU Stock Price')
plt.legend()
plt.grid(True)
plt.savefig('arima_model.pdf')
plt.show()
